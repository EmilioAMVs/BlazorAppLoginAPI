@page "/Login"
@using System.Text
@inject Microsoft.Extensions.Logging.ILogger<LoginComponent> Logger
@using Newtonsoft.Json
@using Models
@using System.Net
@using APIService
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject IAPIService APIService
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage
@inject NavigationManager Router

<EditForm Model="@usuarioLogin" OnValidSubmit="CallApi">

    <!-- Con la etiqueta DataAnnotationsValidator aplico las anotaciones de validacion que tengo en la clase de Usuario -->
    <DataAnnotationsValidator/>

    <div class="fondo-imagen d-flex flex-column gap-4">

        <header>
            <div class="d-flex flex-row flex-wrap align-items-center justify-content-around p-3 font-raleway-class">
                <h2 class="header-responsive">UDLA</h2>
                <div class="fondo-logo-UDLA"></div>
                <h2 class="header-responsive">Grupo 1</h2>
            </div>
        </header>

        <div class="d-flex justify-content-center font-raleway-class">
            <div class="d-flex flex-wrap flex-column justify-content-center align-items-center gap-4 w-50 col-sm-12 col-md-9 p-3 width-responsive">

                <!-- Usuario -->
                <div class="d-flex flex-column w-75 gap-2">
                    <label>Usuario</label>
                    <input type="text" name="username" required id="txt-username" placeholder="Ingrese su usuario." class="form-control" @bind="usuarioLogin._username"/>
                    <!-- Con esta etiqueta ValidationMessage y su atributo For despliego el mensaje de DataAnotation de la clase Usuario para el atributo que haya indicado en la etiqueta For -->
                    <ValidationMessage For="( () => usuarioLogin._username )"/>
                </div>
                <!-- Contrasenia -->
                <div class="d-flex flex-column w-75 gap-2">
                    <label>Contraseña</label>
                    <input type="password" name="password" required id="txt-password" placeholder="Ingrese su contraseña." class="form-control" @bind="usuarioLogin._password">
                    <ValidationMessage For="( () => usuarioLogin._password )" />
                </div>

                <div class="d-flex flex-column gap-3 w-75">
                    <!-- Button -->
                    <button type="submit" class="btn btn-info">Iniciar Sesión</button>
                    <!-- Create account / Help? -->
                    <div class="d-flex gap-5 justify-content-between text-center">
                        <a href="#" class="text-decoration-none">Crear una cuenta</a>
                        <a href="#" class="text-decoration-none">Necesitas ayuda?</a>
                    </div>
                </div>

            </div>
        </div>

    </div>

</EditForm>

<div class="modal fade font-raleway-class" id="viewProductModal" tabindex="-1" role="dialog" aria-labelledby="viewProductLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="viewProductName"></h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" onclick="hideProductModal()">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="viewProductDescription">
                <!--Deberia mostrarse solo cuando hay habido autentificacion-->
                <p>Por favor escoja la compañia a la que pertenece.-</p>
                @if (usuarioLogin.isAuthenticated && listaEmisores.Count() > 0 )
                {
                    
                    <select class="form-select" aria-label="Default select example" @bind="numeroCompaniaSeleccionada">
                        <option selected>Elija su compañia!</option>
                        @foreach (var emisor in @listaEmisores)
                        {

                            <option value="@emisor.Codigo">@emisor.Codigo - @emisor.NombreEmisor</option>
                               
                        }
                    </select>
                    
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" onclick="hideProductModal()">Cerrar</button>
                @if (usuarioLogin.isAuthenticated)
                {
                    <div> 
                        <button type="button" class="btn btn-secondary" @onclick="validarEmisorSeleccionado">Continuar</button>
                    </div>
                }
            </div>

        </div>
    </div>
</div>


@code {

    Usuario usuarioLogin = new Usuario();
    List<Emisor> listaEmisores = new List<Emisor>();
    string numeroCompaniaSeleccionada = string.Empty;

    private async Task CallApi()
    {
        try 
        {
            await cerrarModal();

            // El usuario debe pasar los filtros para autenticarse
            usuarioLogin.isAuthenticated = false;

            EmisorUsuario emisorFounded =  await APIService.UserAuthentication(usuarioLogin._username, usuarioLogin._password);

            if (emisorFounded != null )
            {

                if (emisorFounded.OBSERVACION.Contains("CONTRASEÑA INVALIDA", StringComparison.OrdinalIgnoreCase))
                {

                    await JSRuntime.InvokeVoidAsync("viewProduct", "Credenciales Incorrectas", "La contraseña o el usuario son incorrectas!");
                    return;

                }

                // El usuario es autenticado correctamente y se muestra un mensaje de confirmación
                usuarioLogin.isAuthenticated = true;

                // Se guarda en variables de sesión el nombre, perfil, observación y estado del emisor que se autenticó correctamente
                await SessionStorage.SetItemAsync("emisorNombre", emisorFounded.NOMBREUSUARIO);
                await SessionStorage.SetItemAsync("emisorPerfil", emisorFounded.PERFIL);
                await SessionStorage.SetItemAsync("emisorObservacion", emisorFounded.OBSERVACION);
                await SessionStorage.SetItemAsync("emisorEstado", emisorFounded.ESTADO); // Estado 'A' significa activo
                await SessionStorage.SetItemAsync("emisorNumero", emisorFounded.Emisor);

                if (listaEmisores.Count() <= 0)
                {
                    
                    // En caso de autenticación correcta se llena el select con las opciones de compañias recibidas mediante la API
                    listaEmisores = await APIService.GetEmisor();

                }

                await JSRuntime.InvokeVoidAsync("viewProduct", "Éxito", $"Ingreso exitoso, bienvenido {emisorFounded?.NOMBREUSUARIO}!");
                return;

            }

            await JSRuntime.InvokeVoidAsync("viewProduct", "Error", "Hubo un error al realizar la consulta!\n" + 
                                        "Por favor verifique las credenciales ingresadas o ingrese nuevamente más tarde");
        }
        catch (Exception error)
        {

            Logger.LogError($"Error en CallApi: {error.Message}");

        }

    }

    private async Task validarEmisorSeleccionado()
    {
        try
        {

            string emisorNumeroSession = await SessionStorage.GetItemAsync<string>("emisorNumero");

            if (listaEmisores.Count() > 0 && int.TryParse(emisorNumeroSession, out int emisorNumero) && int.Parse(numeroCompaniaSeleccionada) == emisorNumero)
            {

                // Redirijo al home en caso de que la compañia seleccionada haya sido la correcta
                await cerrarModal();
                Router.NavigateTo("/home");
                return;

            }

            usuarioLogin.isAuthenticated = false;
            StateHasChanged();
            await SessionStorage.ClearAsync();
            await JSRuntime.InvokeVoidAsync("viewProduct", "Compañia Incorrecta", "Usted no pertenece a la compañia seleccionada, por favor intente iniciar sesión nuevamente.");

        } catch(Exception error)
        {
            
            Logger.LogError($"Error en validarEmisorSeleccionado: {error.Message}");

        }

    }

    private async Task cerrarModal()
    {

        await JSRuntime.InvokeVoidAsync("hideProductModal");

    }


}
